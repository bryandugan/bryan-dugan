{"hash":"08fc42725f9ff6931124ff89f8ecdc8408678011","data":{"post":{"title":"Upgrade PHP with Homebrew","path":"/upgrade-php-with-homebrew/","slug":"upgrade-php-with-homebrew","datetime":"2019-08-12 00:00:00","content":"<p>Need to update PHP for use with your local development stack? This short guide will run you through how to do just that, as well as upgrading your PHP version in Laravel Valet.</p>\n<h2 id=\"upgrading-php-with-homebrew\"><a href=\"#upgrading-php-with-homebrew\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Upgrading PHP with Homebrew</h2>\n<p>Assuming you already have Homebrew installed </p>\n<p>Update Brew.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew update</code></pre>\n<p>Install the latest version of PHP.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> php</code></pre>\n<p>Alternatively, if you're looking to use a specific version to match your production server version you can add @ then the version number to the end of the formula. So if you wanted to install PHP 7.3, you would use the following command.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> php@7.3</code></pre>\n<p>Check which version of PHP you're currently running by using <code>php -v</code>.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">php -v\n\nPHP <span class=\"token number\">7.1</span>.30 <span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>built: Jun <span class=\"token number\">17</span> <span class=\"token number\">2019</span> 08:52:19<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span> NTS <span class=\"token punctuation\">)</span>\nCopyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">1997</span>-2018 The PHP Group\nZend Engine v3.1.0, Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">1998</span>-2018 Zend Technologies\nwith Zend OPcache v7.1.30, Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">1999</span>-2018, by Zend Technologies`</code></pre>\n<p>Unlink your old PHP version from brew by typing the old PHP version minus the minor update number. (In this example's case we are using PHP <code>7.1.30</code>, so we would use PHP <code>7.1</code>)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew unlink php@7.1</code></pre>\n<p><strong>Note:</strong> PHP went through a formula update in 2018 where <code>php71</code> is now <code>php@7.1</code> so be sure to try both ways if you're running into issues.</p>\n<p>Link your new PHP version.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">link</span> php@7.3</code></pre>\n<p><strong>Note:</strong> Replace <code>7.3</code> with whatever version of PHP you want to switch to or remove <code>@7.3</code> completely if you just ran <code>brew install php</code></p>\n<hr>\n<h2 id=\"updating-your-path\"><a href=\"#updating-your-path\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Updating Your $PATH</h2>\n<p>Now that your PHP is updated and linked, make sure your <code>$PATH</code> is properly setup.</p>\n<p>Open <code>~/.bash_profile</code> in your favorite text editor and add the following: (Replace PHP 7.3.7 with whatever version of PHP you're using)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Setting PATH for PHP 7.3</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"/usr/local/opt/php@7.3.7/bin:<span class=\"token environment constant\">$PATH</span>\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"/usr/local/opt/php@7.3.7/sbin:<span class=\"token environment constant\">$PATH</span>\"</span></code></pre>\n<p><strong>Note</strong>: After modifying your <code>.bash_profile</code> you must fully close out of your terminal and re-launch it for your changes to take effect. Alternatively, you can type <code>source ~/.bash_profile</code> in your terminal for the changes to take effect.</p>\n<hr>\n<h2 id=\"adding-php-packages\"><a href=\"#adding-php-packages\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Adding PHP Packages</h2>\n<p>Homebrew now uses PECL for all PHP packages, you may need to reinstall any packages that were previously managed with Homebrew.</p>\n<p>To find out if you're already using PECL packages type the following command in your terminal to list out any packages that you may have installed.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">pecl list</code></pre>\n<p>Install your PECL packages. Imagick is the only one I use, which handles image transformations in Craft CMS. To install it, run the following command</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">pecl <span class=\"token function\">install</span> imagick</code></pre>\n<p><strong>Note:</strong> To to see a list of all PECL packages, refer to <a href=\"https://pecl.php.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://pecl.php.net/</a></p>\n<hr>\n<h2 id=\"configure-php-settings\"><a href=\"#configure-php-settings\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configure PHP Settings</h2>\n<p>In order to figure out where your php.ini settings are located, run the following command in your terminal.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">php --ini</code></pre>\n<p>PHP in Homebrew by default adds a file called <code>php-memory-limits.ini</code> which is in the following location. This will overwrite the settings in the default php.ini and make it easier to move over to a new installation in the future.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">Configuration File <span class=\"token punctuation\">(</span>php.ini<span class=\"token punctuation\">)</span> Path: /usr/local/etc/php/7.3\nLoaded Configuration File:         /usr/local/etc/php/7.3/php.ini\nScan <span class=\"token keyword\">for</span> additional .ini files in: /usr/local/etc/php/7.3/conf.d\nAdditional .ini files parsed:      /usr/local/etc/php/7.3/conf.d/ext-opcache.ini,\n/usr/local/etc/php/7.3/conf.d/php-memory-limits.ini</code></pre>\n<p>Modify your php-memory-limits.ini file and move over your settings. Below is a list of my personal config file.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token punctuation\">;</span> Max memory per instance\nmemory_limit <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token constant\">M</span>\n\n<span class=\"token punctuation\">;</span>Set the max ececution time of a script<span class=\"token punctuation\">.</span>\nmax_execution_time <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n\n<span class=\"token punctuation\">;</span>The maximum size of an uploaded file<span class=\"token punctuation\">.</span>\nupload_max_filesize <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token constant\">M</span>\n\n<span class=\"token punctuation\">;</span>Sets max size of post data allowed<span class=\"token punctuation\">.</span> This setting also affects file upload<span class=\"token punctuation\">.</span> To upload large files<span class=\"token punctuation\">,</span> this value must be larger than upload_max_filesize\npost_max_size <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token constant\">M</span></code></pre>\n<h2 id=\"upgrading-valet\"><a href=\"#upgrading-valet\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Upgrading Valet</h2>\n<p>If you use Laravel Valet for all your local development, here are the steps to finish upgrading PHP. Run the following commands to update Valet in your terminal:</p>\n<p>Update all composer files. </p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">composer</span> global update</code></pre>\n<p>Run the install script for Valet.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">valet <span class=\"token function\">install</span></code></pre>\n<p>Restart Valet by running the restart script.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">valet restart</code></pre>\n","description":"Need to update PHP for use with your local development stack? This short guide will run you through how to do just that, as well as upgrading your PHP version in Laravel Valet.","timeToRead":3,"cover":null,"author":{"id":"bryan-dugan","title":"bryan-dugan","path":"/author/bryan-dugan/"},"tags":[{"id":"homebrew","title":"homebrew","path":"/tag/homebrew/"},{"id":"php","title":"php","path":"/tag/php/"},{"id":"development","title":"development","path":"/tag/development/"}]}},"context":{}}