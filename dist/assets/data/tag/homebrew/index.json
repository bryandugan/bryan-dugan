{"hash":"903e07fbe29cd3228d7e7c8a84bd242c09ea779f","data":{"tag":{"id":"homebrew","title":"homebrew","path":"/tag/homebrew/","belongsTo":{"totalCount":2,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"015f10c76b0d8da7acbc7847bf0d7651","title":"Setting up a new Mac for Development","datetime":"2020-10-26 00:00:00","path":"/setting-up-a-new-mac-for-development/","content":"<h2 id=\"installing-homebrew\"><a href=\"#installing-homebrew\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing Homebrew</h2>\n<p>Homebrew is a command-line interface(CLI) package manager for OSX.</p>\n<p>To get started, you'll first need to install Apple's Xcode command-line tools. To do this, you first need to install Xcode from the Apple App Store. Once Xcode is installed, open it and select <code>Xcode > Preferences > Locations > Command Line</code> Tools to install the required command-line tools to use Homebrew.</p>\n<p>Now that the xcode CLI is installed, we can now install Homebrew. To install Homebrew, copy, and paste the below command into your terminal to get started. If the below command doesn't work, take a look at the <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Homebrew documentation</a>.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">/bin/bash -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh<span class=\"token variable\">)</span></span>\"</span></code></pre>\n<h3 id=\"add-homebrew-to-your-path\"><a href=\"#add-homebrew-to-your-path\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Add Homebrew to your $PATH</h3>\n<p>For Homebrew to work properly, your <code>bin</code> directory must first be added to your <code>$PATH</code>.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=\"/usr/local/bin:<span class=\"token environment constant\">$PATH</span>\"'</span> <span class=\"token operator\">>></span> ~/.bash_profile</code></pre>\n<h2 id=\"installing-casks\"><a href=\"#installing-casks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing Casks</h2>\n<p>Casks are graphical user interface(GUI) applications that will be installed in your Mac's Applications folder. For a master list of all available Cask formulae, there is one available on the <a href=\"https://formulae.brew.sh/cask/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official Brew website</a>. </p>\n<p>Use the lists I created as a starting point for installing your applications and feel free to modify them to your liking. Also, be sure to hold onto your list in a Github Gist or some form of cloud storage for safekeeping in case you need to set up another new computer in the future.</p>\n<h3 id=\"design-applications\"><a href=\"#design-applications\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Design Applications</h3>\n<p>Here is a list of all the design applications that I use.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew cask <span class=\"token function\">install</span> adobe-creative-cloud\nbrew cask <span class=\"token function\">install</span> figma\nbrew cask <span class=\"token function\">install</span> sketch\nbrew cask <span class=\"token function\">install</span> sketch-toolbox\nbrew cask <span class=\"token function\">install</span> zeplin</code></pre>\n<h3 id=\"development-applications\"><a href=\"#development-applications\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Development Applications</h3>\n<p>These are all the development related applications that I use.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew cask <span class=\"token function\">install</span> google-chrome\nbrew cask <span class=\"token function\">install</span> firefox\nbrew cask <span class=\"token function\">install</span> iterm2\nbrew cask <span class=\"token function\">install</span> jetbrains-toolbox\nbrew cask <span class=\"token function\">install</span> visual-studio-code\nbrew cask <span class=\"token function\">install</span> postman\nbrew cask <span class=\"token function\">install</span> sequel-ace\nbrew cask <span class=\"token function\">install</span> filezilla\nbrew cask <span class=\"token function\">install</span> sourcetree</code></pre>\n<h3 id=\"regular-applications\"><a href=\"#regular-applications\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Regular Applications</h3>\n<p>Here are some other applications that I use regularly.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew cask <span class=\"token function\">install</span> google-backup-and-sync\nbrew cask <span class=\"token function\">install</span> spotify\nbrew cask <span class=\"token function\">install</span> discord\nbrew cask <span class=\"token function\">install</span> slack\nbrew cask <span class=\"token function\">install</span> notion\nbrew cask <span class=\"token function\">install</span> 1password\nbrew cask <span class=\"token function\">install</span> handbrake</code></pre>\n<h2 id=\"installing-homebrew-applications\"><a href=\"#installing-homebrew-applications\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing Homebrew Applications</h2>\n<p>These are the most common development CLI applications that you'll be using with whatever development server you'll choose to use.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> php\nbrew <span class=\"token function\">install</span> <span class=\"token function\">composer</span>\nbrew <span class=\"token function\">install</span> mysql\nbrew <span class=\"token function\">install</span> <span class=\"token function\">yarn</span></code></pre>\n<h3 id=\"install-nvm\"><a href=\"#install-nvm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install NVM</h3>\n<p>Node Version Manager (nvm) is a manager that allows you to install and use multiple versions of node. This is great when you need to quickly switch back and forth between new and old versions of node.</p>\n<p>If you're like me, and mainly use node to install packages and run Webpack scripts, I'd recommend installing the Long Term Support(LTS) version. That way, your setup will be stable and supported for much longer before you need to upgrade. </p>\n<p>Install nvm via Homebrew</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> nvm</code></pre>\n<p>Create nvm directory</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> ~/.nvm</code></pre>\n<p>Now we will install different node versions depending on your needs. If you need a specific version of node, such as <code>12.18.3</code> you may specify the version number. Otherwise using the major version number will grab the newest release of that particular version. Most projects I use either require v6, 8, or 12.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">nvm <span class=\"token function\">install</span> <span class=\"token number\">6</span>\nnvm <span class=\"token function\">install</span> <span class=\"token number\">8</span>\nnvm <span class=\"token function\">install</span> <span class=\"token number\">12</span></code></pre>\n<p>I would also recommend setting a default node version. A majority of the projects I work on are modern web apps, so I set the default to the latest LTS version which at the time of this writing is 12.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">nvm <span class=\"token builtin class-name\">alias</span> default <span class=\"token number\">12</span></code></pre>\n<p>If you need to use a specific version number for a project, open up a terminal window and type the command below to use that version. Once you close that terminal window, it will default back to the default node you have just setup. </p>\n<pre class=\"language-bash\"><code class=\"language-bash\">nvm use <span class=\"token number\">8</span></code></pre>\n<p>Use this command to allow write access to the global <code>node_modules</code> folder. Otherwise, you will have to run <code>sudo</code> every time you need to install or modify anything inside it.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> -R <span class=\"token environment constant\">$USER</span> /usr/local/lib/node_modules </code></pre>\n<h2 id=\"configure-your-terminal\"><a href=\"#configure-your-terminal\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configure your Terminal</h2>\n<p>The Terminal I use is iTerm2. Starting with Mac OSX Catalina, Apple switched from Bash to ZSH for its default shell. During that time, I decided to make the switch as well.</p>\n<p>If you're not familiar with command-line tools or are a visual learner, a lot of my config is based upon Wes Bos' <a href=\"https://commandlinepoweruser.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Command Line Power User</a> course.</p>\n<p>If you're looking for a color scheme, here is the one that I use. <a href=\"https://gist.github.com/bryandugan/4c125c61b2ce6885dfa7b28e006f8737\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gist.github.com/bryandugan/4c125c61b2ce6885dfa7b28e006f8737</a></p>\n<p>Alternatively, you can create/import your own or grab one from <a href=\"https://iterm2colorschemes.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iterm2-color-schemes</a></p>\n<h3 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Oh My Zsh</h3>\n<p>Oh My ZSH is an addition to the ZSH terminal that adds thousands of helpful functions, helpers, plugins, and themes to supercharge your command line experience.</p>\n<p>To install Oh My Zsh, go to their website and run the Install oh-my-zsh via curl command.</p>\n<p><a href=\"https://ohmyz.sh/#install\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ohmyz.sh/#install</a></p>\n<p>Once installed, it's time to configure your $PATH and defaults, including the theme. To do this, you're going to have to modify a file in your <code>Home</code> or <code>~</code> Directory. That file is <code>.zshrc</code>. For an example file of all the changes I made to get it working with PHP, bin files, composer as well as setting themes and configuring Z you can see my config here. <a href=\"https://gist.github.com/bryandugan/4a02c9fab3c75eb9112e3c436fed4235\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gist.github.com/bryandugan/4a02c9fab3c75eb9112e3c436fed4235</a></p>\n<h3 id=\"quickly-find-recent-files-with-z\"><a href=\"#quickly-find-recent-files-with-z\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quickly find recent files with Z</h3>\n<p>Z is a handy terminal utility that allows you to quickly go to any recent folder. </p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> z</code></pre>\n<p>Add to .zshrc</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span><span class=\"token variable\"><span class=\"token variable\">$(</span>brew --prefix<span class=\"token variable\">)</span></span>/bin</code></pre>\n<h2 id=\"laravel-valet-as-a-local-development-server\"><a href=\"#laravel-valet-as-a-local-development-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Laravel Valet as a Local Development Server</h2>\n<p>Laravel Valet is what I use as my local development server. I use it because it's easy to set up and doesn't require running a Vagrant box or anything else that is too complicated. It turns your Mac into a development server by running Nginx in the background as you start your computer. My favorite feature is that you can run <code>valet park</code> in your local development directory, and any folder in that directory becomes a <code>.test</code> domain. So if you have a folder called <code>my-website</code>, open your favorite browser and type in <code>my-website.test</code> and you'll be directed to your index file in the <code>my-website</code> folder.</p>\n<p>To set up Valet, I recommend <a href=\"https://medium.com/@jalendport/running-craft-cms-3-on-laravel-valet-6df61e5193fd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jalen Davenport's awesome guide</a> on how to set up Valet. It's geared towards Craft CMS development, but the basic install is all the same for whatever type of web development you'll be doing.</p>\n<h2 id=\"php-extensions\"><a href=\"#php-extensions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PHP Extensions</h2>\n<p>PHP out of the box has just about everything you need to get up and running. However, most PHP applications require a few third-party extensions. This section will go over the most commonly needed extensions.</p>\n<p><strong>Getting Started</strong></p>\n<p>Many extensions need to know your PHP install location and/or the php.ini file. There are a few commands that will help you quickly obtain the required information.</p>\n<p>The current active path to where PHP is installed.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">which</span> php</code></pre>\n<p>Which php.ini file/s your install is using.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">php --ini</code></pre>\n<p>Sometimes the <code>php --ini</code> command results can be a little bit unclear.</p>\n<p>If you're still having issues, you can run <code>phpinfo();</code> by creating a new PHP file (such as index.php) and opening it up in your browser. Scroll down and look for <code>Loaded Configuration File</code>. From there, you'll see the full path for your php.ini file.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span></code></pre>\n<h3 id=\"composer\"><a href=\"#composer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Composer</h3>\n<p>A package manager for PHP. If you're familiar with NPM for JavaScript packages, Composer is the NPM for the PHP world. Use the command below to install composer. If that doesn't work, refer to the <a href=\"https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Composer docs.</a></p>\n<pre class=\"language-bash\"><code class=\"language-bash\">php composer-setup.php --install-dir<span class=\"token operator\">=</span>bin --filename<span class=\"token operator\">=</span>composer</code></pre>\n<h3 id=\"imagick\"><a href=\"#imagick\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Imagick</h3>\n<p>Imagick otherwise known as <a href=\"https://imagemagick.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ImageMagick</a> is an extension for transforming images. It's much better than the default library GD. It has more support for multiple formats and also allows image adjustments.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">pecl <span class=\"token function\">install</span> imagick</code></pre>\n<p><strong>Troubleshooting:</strong></p>\n<p>If you get this error:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ERROR: failed to <span class=\"token function\">mkdir</span> /usr/local/Cellar/php/7.4.7/pecl/20190902</code></pre>\n<p>Navigate to <code>/usr/local/Cellar/php/7.x.x/</code>, remove the symlink, and try installing something via pecl again. This should create the directory.</p>\n<p><strong>php.ini setup to work with Imagick:</strong></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /usr/local/etc/php/7.4.7/php.ini</code></pre>\n<p>(feel free to replace vim with whatever code editor of choice you use)</p>\n<p>Find this line</p>\n<pre class=\"language-text\"><code class=\"language-text\">extension = &quot;imagick.so&quot;</code></pre>\n<p>Change it to this:</p>\n<pre class=\"language-text\"><code class=\"language-text\">extension = &quot;/usr/local/Cellar/php/7.4.7/pecl/20190902/imagick.so&quot;</code></pre>\n<h2 id=\"mysql\"><a href=\"#mysql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL</h2>\n<p>MySQL is what I use for my local databases along with <a href=\"https://sequel-ace.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequel Ace</a> to manage them. Sequel Ace allows you to visually see/edit database tables. It's a maintained fork of the old Sequel Pro software that stopped being maintained back in 2017.</p>\n<p>Install mysql</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> mysql</code></pre>\n<p><strong>Troubleshooting:</strong> </p>\n<p>In case you keep running into connection failed issues, look at the solution by Maciej Kwas to reset your password: <a href=\"https://stackoverflow.com/questions/51179516/sequel-pro-and-mysql-connection-failed?rq=1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/51179516/sequel-pro-and-mysql-connection-failed?rq=1</a></p>\n<h2 id=\"google-chrome\"><a href=\"#google-chrome\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Google Chrome</h2>\n<p>Chrome is what I use for all my development testing. Disabling cache while DevTools is open is a setting I regularly forget to switch on while setting up a new computer. It makes it so that when a page is refreshed, the cache is cleared while the DevTools window is open.</p>\n<p>Go to <code>Settings > Network > Disable cache (when DevTools is open)</code></p>\n<p>There we have it! Have any questions or comments? Send me a DM on <a href=\"https://twitter.com/bryandugan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter</a> and I'll do my best to answer them.</p>\n","excerpt":"","description":"This is the Homebrew Cask setup of my personal development laptop. Feel free to use this as a starting point for a fresh install of any new OSX machine.","timeToRead":7,"author":{"id":"bryan-dugan","title":"bryan-dugan","path":"/author/bryan-dugan/"}}},{"node":{"id":"7528a318b479ad3479028e874069c3bb","title":"Upgrade PHP with Homebrew","datetime":"2019-08-12 00:00:00","path":"/upgrade-php-with-homebrew/","content":"<p>Need to update PHP for use with your local development stack? This short guide will run you through how to do just that, as well as upgrading your PHP version in Laravel Valet.</p>\n<h2 id=\"upgrading-php-with-homebrew\"><a href=\"#upgrading-php-with-homebrew\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Upgrading PHP with Homebrew</h2>\n<p>Assuming you already have Homebrew installed </p>\n<p>Update Brew.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew update</code></pre>\n<p>Install the latest version of PHP.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> php</code></pre>\n<p>Alternatively, if you're looking to use a specific version to match your production server version you can add @ then the version number to the end of the formula. So if you wanted to install PHP 7.3, you would use the following command.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> php@7.3</code></pre>\n<p>Check which version of PHP you're currently running by using <code>php -v</code>.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">php -v\n\nPHP <span class=\"token number\">7.1</span>.30 <span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>built: Jun <span class=\"token number\">17</span> <span class=\"token number\">2019</span> 08:52:19<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span> NTS <span class=\"token punctuation\">)</span>\nCopyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">1997</span>-2018 The PHP Group\nZend Engine v3.1.0, Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">1998</span>-2018 Zend Technologies\nwith Zend OPcache v7.1.30, Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">1999</span>-2018, by Zend Technologies`</code></pre>\n<p>Unlink your old PHP version from brew by typing the old PHP version minus the minor update number. (In this example's case we are using PHP <code>7.1.30</code>, so we would use PHP <code>7.1</code>)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew unlink php@7.1</code></pre>\n<p><strong>Note:</strong> PHP went through a formula update in 2018 where <code>php71</code> is now <code>php@7.1</code> so be sure to try both ways if you're running into issues.</p>\n<p>Link your new PHP version.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">link</span> php@7.3</code></pre>\n<p><strong>Note:</strong> Replace <code>7.3</code> with whatever version of PHP you want to switch to or remove <code>@7.3</code> completely if you just ran <code>brew install php</code></p>\n<hr>\n<h2 id=\"updating-your-path\"><a href=\"#updating-your-path\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Updating Your $PATH</h2>\n<p>Now that your PHP is updated and linked, make sure your <code>$PATH</code> is properly setup.</p>\n<p>Open <code>~/.bash_profile</code> in your favorite text editor and add the following: (Replace PHP 7.3.7 with whatever version of PHP you're using)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Setting PATH for PHP 7.3</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"/usr/local/opt/php@7.3.7/bin:<span class=\"token environment constant\">$PATH</span>\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"/usr/local/opt/php@7.3.7/sbin:<span class=\"token environment constant\">$PATH</span>\"</span></code></pre>\n<p><strong>Note</strong>: After modifying your <code>.bash_profile</code> you must fully close out of your terminal and re-launch it for your changes to take effect. Alternatively, you can type <code>source ~/.bash_profile</code> in your terminal for the changes to take effect.</p>\n<hr>\n<h2 id=\"adding-php-packages\"><a href=\"#adding-php-packages\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Adding PHP Packages</h2>\n<p>Homebrew now uses PECL for all PHP packages, you may need to reinstall any packages that were previously managed with Homebrew.</p>\n<p>To find out if you're already using PECL packages type the following command in your terminal to list out any packages that you may have installed.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">pecl list</code></pre>\n<p>Install your PECL packages. Imagick is the only one I use, which handles image transformations in Craft CMS. To install it, run the following command</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">pecl <span class=\"token function\">install</span> imagick</code></pre>\n<p><strong>Note:</strong> To to see a list of all PECL packages, refer to <a href=\"https://pecl.php.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://pecl.php.net/</a></p>\n<hr>\n<h2 id=\"configure-php-settings\"><a href=\"#configure-php-settings\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configure PHP Settings</h2>\n<p>In order to figure out where your php.ini settings are located, run the following command in your terminal.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">php --ini</code></pre>\n<p>PHP in Homebrew by default adds a file called <code>php-memory-limits.ini</code> which is in the following location. This will overwrite the settings in the default php.ini and make it easier to move over to a new installation in the future.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">Configuration File <span class=\"token punctuation\">(</span>php.ini<span class=\"token punctuation\">)</span> Path: /usr/local/etc/php/7.3\nLoaded Configuration File:         /usr/local/etc/php/7.3/php.ini\nScan <span class=\"token keyword\">for</span> additional .ini files in: /usr/local/etc/php/7.3/conf.d\nAdditional .ini files parsed:      /usr/local/etc/php/7.3/conf.d/ext-opcache.ini,\n/usr/local/etc/php/7.3/conf.d/php-memory-limits.ini</code></pre>\n<p>Modify your php-memory-limits.ini file and move over your settings. Below is a list of my personal config file.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token punctuation\">;</span> Max memory per instance\nmemory_limit <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token constant\">M</span>\n\n<span class=\"token punctuation\">;</span>Set the max ececution time of a script<span class=\"token punctuation\">.</span>\nmax_execution_time <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n\n<span class=\"token punctuation\">;</span>The maximum size of an uploaded file<span class=\"token punctuation\">.</span>\nupload_max_filesize <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token constant\">M</span>\n\n<span class=\"token punctuation\">;</span>Sets max size of post data allowed<span class=\"token punctuation\">.</span> This setting also affects file upload<span class=\"token punctuation\">.</span> To upload large files<span class=\"token punctuation\">,</span> this value must be larger than upload_max_filesize\npost_max_size <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token constant\">M</span></code></pre>\n<h2 id=\"upgrading-valet\"><a href=\"#upgrading-valet\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Upgrading Valet</h2>\n<p>If you use Laravel Valet for all your local development, here are the steps to finish upgrading PHP. Run the following commands to update Valet in your terminal:</p>\n<p>Update all composer files. </p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">composer</span> global update</code></pre>\n<p>Run the install script for Valet.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">valet <span class=\"token function\">install</span></code></pre>\n<p>Restart Valet by running the restart script.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">valet restart</code></pre>\n","excerpt":"","description":"Need to update PHP for use with your local development stack? This short guide will run you through how to do just that, as well as upgrading your PHP version in Laravel Valet.","timeToRead":3,"author":{"id":"bryan-dugan","title":"bryan-dugan","path":"/author/bryan-dugan/"}}}]}}},"context":{}}