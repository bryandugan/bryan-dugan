{"hash":"2d4737d4d644ce91d8dafa720b76bb228b4fdaa7","data":{"tag":{"id":"mac osx","title":"mac osx","path":"/tag/mac%20osx/","belongsTo":{"totalCount":2,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"015f10c76b0d8da7acbc7847bf0d7651","title":"Setting up a new Mac for Development","datetime":"2020-10-26 00:00:00","path":"/setting-up-a-new-mac-for-development-with-homebrew/","content":"<h2 id=\"installing-homebrew\"><a href=\"#installing-homebrew\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing Homebrew</h2>\n<p>Homebrew is a command-line interface(CLI) package manager for OSX.</p>\n<p>To get started, you'll first need to install Apple's Xcode command-line tools. To do this, you first need to install Xcode from the Apple App Store. Once Xcode is installed, open it and select <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Xcode &gt; Preferences &gt; Locations &gt; Command Line</code> Tools to install the required command-line tools to use Homebrew.</p>\n<p>Now that the xcode CLI is installed, we can now install Homebrew. To install Homebrew, copy, and paste the below command into your terminal to get started. If the below command doesn't work, take a look at the <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Homebrew documentation</a>.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">/bin/bash -c </span><span style=\"color: #89DDFF\">\"$(</span><span style=\"color: #C3E88D\">curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh</span><span style=\"color: #89DDFF\">)\"</span></code></pre>\n<h3 id=\"add-homebrew-to-your-path\"><a href=\"#add-homebrew-to-your-path\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Add Homebrew to your $PATH</h3>\n<p>For Homebrew to work properly, your <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">bin</code> directory must first be added to your <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">$PATH</code>.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #82AAFF\">echo</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">export PATH=\"/usr/local/bin:$PATH\"</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #C792EA\">&gt;&gt;</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #C792EA\">~</span><span style=\"color: #FFFFFF\">/.bash_profile</span></code></pre>\n<h2 id=\"installing-casks\"><a href=\"#installing-casks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing Casks</h2>\n<p>Casks are graphical user interface(GUI) applications that will be installed in your Mac's Applications folder. For a master list of all available Cask formulae, there is one available on the <a href=\"https://formulae.brew.sh/cask/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official Brew website</a>. </p>\n<p>Use the lists I created as a starting point for installing your applications and feel free to modify them to your liking. Also, be sure to hold onto your list in a Github Gist or some form of cloud storage for safekeeping in case you need to set up another new computer in the future.</p>\n<h3 id=\"design-applications\"><a href=\"#design-applications\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Design Applications</h3>\n<p>Here is a list of all the design applications that I use.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">brew cask install adobe-creative-cloud</span>\n<span style=\"color: #FFFFFF\">brew cask install figma</span>\n<span style=\"color: #FFFFFF\">brew cask install sketch</span>\n<span style=\"color: #FFFFFF\">brew cask install sketch-toolbox</span>\n<span style=\"color: #FFFFFF\">brew cask install zeplin</span></code></pre>\n<h3 id=\"development-applications\"><a href=\"#development-applications\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Development Applications</h3>\n<p>These are all the development related applications that I use.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">brew cask install google-chrome</span>\n<span style=\"color: #FFFFFF\">brew cask install firefox</span>\n<span style=\"color: #FFFFFF\">brew cask install iterm2</span>\n<span style=\"color: #FFFFFF\">brew cask install jetbrains-toolbox</span>\n<span style=\"color: #FFFFFF\">brew cask install visual-studio-code</span>\n<span style=\"color: #FFFFFF\">brew cask install postman</span>\n<span style=\"color: #FFFFFF\">brew cask install sequel-ace</span>\n<span style=\"color: #FFFFFF\">brew cask install filezilla</span>\n<span style=\"color: #FFFFFF\">brew cask install sourcetree</span></code></pre>\n<h3 id=\"regular-applications\"><a href=\"#regular-applications\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Regular Applications</h3>\n<p>Here are some other applications that I use regularly.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">brew cask install google-backup-and-sync</span>\n<span style=\"color: #FFFFFF\">brew cask install spotify</span>\n<span style=\"color: #FFFFFF\">brew cask install discord</span>\n<span style=\"color: #FFFFFF\">brew cask install slack</span>\n<span style=\"color: #FFFFFF\">brew cask install notion</span>\n<span style=\"color: #FFFFFF\">brew cask install 1password</span>\n<span style=\"color: #FFFFFF\">brew cask install handbrake</span></code></pre>\n<h2 id=\"installing-homebrew-applications\"><a href=\"#installing-homebrew-applications\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing Homebrew Applications</h2>\n<p>These are the most common development CLI applications that you'll be using with whatever development server you'll choose to use.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">brew install php</span>\n<span style=\"color: #FFFFFF\">brew install composer</span>\n<span style=\"color: #FFFFFF\">brew install mysql</span>\n<span style=\"color: #FFFFFF\">brew install yarn</span></code></pre>\n<h3 id=\"install-nvm\"><a href=\"#install-nvm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install NVM</h3>\n<p>Node Version Manager (nvm) is a manager that allows you to install and use multiple versions of node. This is great when you need to quickly switch back and forth between new and old versions of node.</p>\n<p>If you're like me, and mainly use node to install packages and run Webpack scripts, I'd recommend installing the Long Term Support(LTS) version. That way, your setup will be stable and supported for much longer before you need to upgrade. </p>\n<p>Install nvm via Homebrew</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">brew install nvm</span></code></pre>\n<p>Create nvm directory</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">mkdir </span><span style=\"color: #C792EA\">~</span><span style=\"color: #FFFFFF\">/.nvm</span></code></pre>\n<p>Now we will install different node versions depending on your needs. If you need a specific version of node, such as <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">12.18.3</code> you may specify the version number. Otherwise using the major version number will grab the newest release of that particular version. Most projects I use either require v6, 8, or 12.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">nvm install 6</span>\n<span style=\"color: #FFFFFF\">nvm install 8</span>\n<span style=\"color: #FFFFFF\">nvm install 12</span></code></pre>\n<p>I would also recommend setting a default node version. A majority of the projects I work on are modern web apps, so I set the default to the latest LTS version which at the time of this writing is 12.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">nvm </span><span style=\"color: #82AAFF\">alias</span><span style=\"color: #FFFFFF\"> default 12</span></code></pre>\n<p>If you need to use a specific version number for a project, open up a terminal window and type the command below to use that version. Once you close that terminal window, it will default back to the default node you have just setup. </p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">nvm use 8</span></code></pre>\n<p>Use this command to allow write access to the global <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">node_modules</code> folder. Otherwise, you will have to run <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">sudo</code> every time you need to install or modify anything inside it.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">sudo chown -R </span><span style=\"color: #89DDFF\">$</span><span style=\"color: #8F93A2\">USER</span><span style=\"color: #FFFFFF\"> /usr/local/lib/node_modules </span></code></pre>\n<h2 id=\"configure-your-terminal\"><a href=\"#configure-your-terminal\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configure your Terminal</h2>\n<p>The Terminal I use is iTerm2. Starting with Mac OSX Catalina, Apple switched from Bash to ZSH for its default shell. During that time, I decided to make the switch as well.</p>\n<p>If you're not familiar with command-line tools or are a visual learner, a lot of my config is based upon Wes Bos' <a href=\"https://commandlinepoweruser.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Command Line Power User</a> course.</p>\n<p>If you're looking for a color scheme, here is the one that I use. <a href=\"https://gist.github.com/bryandugan/4c125c61b2ce6885dfa7b28e006f8737\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gist.github.com/bryandugan/4c125c61b2ce6885dfa7b28e006f8737</a></p>\n<p>Alternatively, you can create/import your own or grab one from <a href=\"https://iterm2colorschemes.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iterm2-color-schemes</a></p>\n<h3 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Oh My Zsh</h3>\n<p>Oh My ZSH is an addition to the ZSH terminal that adds thousands of helpful functions, helpers, plugins, and themes to supercharge your command line experience.</p>\n<p>To install Oh My Zsh, go to their website and run the Install oh-my-zsh via curl command.</p>\n<p><a href=\"https://ohmyz.sh/#install\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ohmyz.sh/#install</a></p>\n<p>Once installed, it's time to configure your $PATH and defaults, including the theme. To do this, you're going to have to modify a file in your <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Home</code> or <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">~</code> Directory. That file is <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">.zshrc</code>. For an example file of all the changes I made to get it working with PHP, bin files, composer as well as setting themes and configuring Z you can see my config here. <a href=\"https://gist.github.com/bryandugan/4a02c9fab3c75eb9112e3c436fed4235\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gist.github.com/bryandugan/4a02c9fab3c75eb9112e3c436fed4235</a></p>\n<h3 id=\"quickly-find-recent-files-with-z\"><a href=\"#quickly-find-recent-files-with-z\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quickly find recent files with Z</h3>\n<p>Z is a handy terminal utility that allows you to quickly go to any recent folder. </p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">brew install z</span></code></pre>\n<p>Add to .zshrc</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">.</span><span style=\"color: #89DDFF\">$(</span><span style=\"color: #C3E88D\">brew --prefix</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #FFFFFF\">/bin</span></code></pre>\n<h2 id=\"laravel-valet-as-a-local-development-server\"><a href=\"#laravel-valet-as-a-local-development-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Laravel Valet as a Local Development Server</h2>\n<p>Laravel Valet is what I use as my local development server. I use it because it's easy to set up and doesn't require running a Vagrant box or anything else that is too complicated. It turns your Mac into a development server by running Nginx in the background as you start your computer. My favorite feature is that you can run <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">valet park</code> in your local development directory, and any folder in that directory becomes a <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">.test</code> domain. So if you have a folder called <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">my-website</code>, open your favorite browser and type in <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">my-website.test</code> and you'll be directed to your index file in the <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">my-website</code> folder.</p>\n<p>To set up Valet, I recommend <a href=\"https://medium.com/@jalendport/running-craft-cms-3-on-laravel-valet-6df61e5193fd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jalen Davenport's awesome guide</a> on how to set up Valet. It's geared towards Craft CMS development, but the basic install is all the same for whatever type of web development you'll be doing.</p>\n<h2 id=\"php-extensions\"><a href=\"#php-extensions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PHP Extensions</h2>\n<p>PHP out of the box has just about everything you need to get up and running. However, most PHP applications require a few third-party extensions. This section will go over the most commonly needed extensions.</p>\n<p><strong>Getting Started</strong></p>\n<p>Many extensions need to know your PHP install location and/or the php.ini file. There are a few commands that will help you quickly obtain the required information.</p>\n<p>The current active path to where PHP is installed.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">which php</span></code></pre>\n<p>Which php.ini file/s your install is using.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">php --ini</span></code></pre>\n<p>Sometimes the <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">php --ini</code> command results can be a little bit unclear.</p>\n<p>If you're still having issues, you can run <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">phpinfo();</code> by creating a new PHP file (such as index.php) and opening it up in your browser. Scroll down and look for <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Loaded Configuration File</code>. From there, you'll see the full path for your php.ini file.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #89DDFF\">&lt;?php</span>\n<span style=\"color: #82AAFF\">phpinfo</span><span style=\"color: #FFFFFF\">()</span><span style=\"color: #89DDFF\">;</span>\n<span style=\"color: #89DDFF\">?&gt;</span></code></pre>\n<h3 id=\"composer\"><a href=\"#composer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Composer</h3>\n<p>A package manager for PHP. If you're familiar with NPM for JavaScript packages, Composer is the NPM for the PHP world. Use the command below to install composer. If that doesn't work, refer to the <a href=\"https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Composer docs.</a></p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">php composer-setup.php --install-dir=bin --filename=composer</span></code></pre>\n<h3 id=\"imagick\"><a href=\"#imagick\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Imagick</h3>\n<p>Imagick otherwise known as <a href=\"https://imagemagick.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ImageMagick</a> is an extension for transforming images. It's much better than the default library GD. It has more support for multiple formats and also allows image adjustments.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">pecl install imagick</span></code></pre>\n<p><strong>Troubleshooting:</strong></p>\n<p>If you get this error:</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">ERROR: failed to mkdir /usr/local/Cellar/php/7.4.7/pecl/20190902</span></code></pre>\n<p>Navigate to <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">/usr/local/Cellar/php/7.x.x/</code>, remove the symlink, and try installing something via pecl again. This should create the directory.</p>\n<p><strong>php.ini setup to work with Imagick:</strong></p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">sudo vim /usr/local/etc/php/7.4.7/php.ini</span></code></pre>\n<p>(feel free to replace vim with whatever code editor of choice you use)</p>\n<p>Find this line</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">extension = &quot;imagick.so&quot;</code>\n<p>Change it to this:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">extension = &quot;/usr/local/Cellar/php/7.4.7/pecl/20190902/imagick.so&quot;</code>\n<h2 id=\"mysql\"><a href=\"#mysql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL</h2>\n<p>MySQL is what I use for my local databases along with <a href=\"https://sequel-ace.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequel Ace</a> to manage them. Sequel Ace allows you to visually see/edit database tables. It's a maintained fork of the old Sequel Pro software that stopped being maintained back in 2017.</p>\n<p>Install mysql</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">brew install mysql</span></code></pre>\n<p><strong>Troubleshooting:</strong> </p>\n<p>In case you keep running into connection failed issues, look at the solution by Maciej Kwas to reset your password: <a href=\"https://stackoverflow.com/questions/51179516/sequel-pro-and-mysql-connection-failed?rq=1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/51179516/sequel-pro-and-mysql-connection-failed?rq=1</a></p>\n<h2 id=\"google-chrome\"><a href=\"#google-chrome\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Google Chrome</h2>\n<p>Chrome is what I use for all my development testing. Disabling cache while DevTools is open is a setting I regularly forget to switch on while setting up a new computer. It makes it so that when a page is refreshed, the cache is cleared while the DevTools window is open.</p>\n<p>Go to <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Settings &gt; Network &gt; Disable cache (when DevTools is open)</code></p>\n<p>There we have it! Have any questions or comments? Send me a DM on <a href=\"https://twitter.com/bryandugan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter</a> and I'll do my best to answer them.</p>\n","excerpt":"","description":"This is the Homebrew Cask setup of my personal development laptop. Feel free to use this as a starting point for a fresh install of any new OSX machine.","timeToRead":7,"author":{"id":"bryan-dugan","title":"bryan-dugan","path":"/author/bryan-dugan/"}}},{"node":{"id":"e85b8e2d598ef5b297f9fee5627b6e18","title":"Creating Symlinks in OSX","datetime":"2015-11-12 00:00:00","path":"/creating-symlinks-in-osx/","content":"<p>If you are just getting started with using the Terminal in OSX, you may have trouble getting to common things like your hosts file. It is possible to create a Symlink (symbolic link) or shortcut in Terminal to get to that specific folder extremely quickly.</p>\n<p>Use the following formula to create a symlink</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">ln -s /any/file/on/the/disk shortcut-name</span></code></pre>\n<p><strong>Example:</strong> Creating a symlink to your hosts file.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">ln -s /etc/hosts hosts-shortcut</span></code></pre>\n<p>Now to quickly open your hosts file all you have to do is use the symlink you created. In this example, we are opening our hosts file with the vim text editor.</p>\n<pre class=\"shiki\" style=\"background-color: #0F111A\"><code><span style=\"color: #FFFFFF\">sudo vim hosts-shortcut</span></code></pre>\n<p><strong>Note:</strong> You must run sudo to modify your hosts file.</p>\n","excerpt":"","description":"It is possible in OSX to create a Symlink (symbolic link) or shortcut in Terminal to get to that specific folder extremely quickly.","timeToRead":1,"author":{"id":"bryan-dugan","title":"bryan-dugan","path":"/author/bryan-dugan/"}}}]}}},"context":{}}